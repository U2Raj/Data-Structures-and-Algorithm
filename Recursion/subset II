class Solution {
public:

    void backtrack(vector<int>& nums,vector<vector<int>>& ans,vector<int>& ds, int i){
//          if(i==nums.size()){
//             ans.push_back(ds);
//             return;
//          }
//          ds.push_back(nums[i]);
//          backtrack(nums,ans,ds,i+1);

//          ds.pop_back(); 

//          int idx = i+1;
//          while(idx<nums.size() && nums[idx]==nums[idx-1]) idx++;

//          backtrack(nums,ans,ds,idx);
//    }


    void subset2(int idx, vector<int>& ds, vector<vector<int>>& ans,vector<int>& nums) {
        ans.push_back(ds);

        for (int i = idx; i < nums.size(); i++) {
            if (i> idx && nums[i] == nums[i - 1]) continue;
            ds.push_back(nums[i]);
            subset2(i + 1, ds, ans, nums);
            ds.pop_back();
        }
    }

public:
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        vector<vector<int>> ans;
        vector<int> ds;
        subset2(0, ds, ans, nums);
        return ans;
    }
};
