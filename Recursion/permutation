//Approach 1  Using Freq array(hashing)
//for solution refer - https://leetcode.com/problems/permutations/solutions/6334864/simple-and-easy-to-understand-solution-1-81mi

class Solution {
public:
    void comb(vector<int>& ds,vector<int>& freq,vector<vector<int>>& ans,vector<int>& nums){
        if(ds.size() == nums.size()){
            ans.push_back(ds);
            return;
        }
        for(int i=0;i<nums.size();i++){
            if(!freq[i]){
                freq[i]=1;
                ds.push_back(nums[i]);
                comb(ds,freq,ans, nums);
                freq[i]=0;
                ds.pop_back();
            }
        }
    }    
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> ans;
        vector<int> ds;
        int n = nums.size();
        vector<int> freq(n,0);
        comb(ds,freq,ans, nums);
        return ans;
    }
};

//********************************************************************************************************

//Approach 2 Swapping
class Solution {
public:
    void comb(int idx, vector<vector<int>>& ans,vector<int>& nums){
        if(idx == nums.size()){
            ans.push_back(nums);
            return;
        }
        for(int i=idx;i<nums.size();i++){
              swap(nums[idx],nums[i]);
              comb(idx+1,ans,nums);
              swap(nums[idx], nums[i]);
            }
        }
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> ans;
        comb(0,ans, nums);
        return ans;
    }
};
