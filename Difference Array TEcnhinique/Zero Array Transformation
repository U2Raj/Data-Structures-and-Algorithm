class Solution {
public:
    bool diffArr(vector<int>& nums, vector<vector<int>>& queries,int k){
        int n = nums.size();
        vector<int> diff(n,0);

        for(int i=0;i<=k;i++){
            int l = queries[i][0];
            int r = queries[i][1];
            int x = queries[i][2];

            diff[l]+=x;
            if(r+1<n) diff[r+1]-=x;
        }
        //cummulative sum
        int cumSum=0;
        for(int i=0;i<n;i++){
           cumSum+=diff[i];
           diff[i]=cumSum;

           if(nums[i]-diff[i]>0){
            return false;
           }
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int q = queries.size();
         
         auto lambda = [](int x){   //struct of lambda func.
             return x==0;
         };
        if(all_of(nums.begin(), nums.end(),lambda)){   //Edge Case
            return 0;   //Already array is 0, so no queri req.
        }
        
        int l=0;
        int r=q-1;
        int k=-1;
        while(l<=r){
           int mid = l+(r-l)/2;
           if(diffArr(nums,queries,mid)==true){
            k=mid+1;
            r=mid-1;
           }else{
            l=mid+1;
           }
        }
        return k;
    }
};