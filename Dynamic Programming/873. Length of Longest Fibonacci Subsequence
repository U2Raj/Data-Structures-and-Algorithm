class Solution {
public:
//Memoization
    int solve(int j,int k,vector<int>&arr, unordered_map<int,int>& mp, vector<vector<int>>& dp){
              int target = arr[k] - arr[j];
              if(dp[j][k]!=-1) return dp[j][k];
              if(mp.count(target) && mp[target]<j){
                int i = mp[target];
                return dp[j][k] = solve(i,j,arr,mp,dp)+1;
              }
              return dp[j][k]=2;
    }
    int lenLongestFibSubseq(vector<int>& arr) {
        //Recursion
        int n = arr.size();
        
        vector<vector<int>> dp(n, vector<int>(n,-1));

        unordered_map<int,int> mp;
        for(int i=0;i<n;i++){
            mp[arr[i]] = i;
        }
        
        int longest_len=0;
        for(int j=1;j<n;j++){
            for(int k=j+1;k<n;k++){
                int count = solve(j,k,arr,mp,dp);
                if(count>=3) longest_len=max(longest_len,count);
            }
        }
        return longest_len;
    }
};

****************************************************************************************************************

//Tabulation (Bottom-up Approach)

class Solution {
public:
    int lenLongestFibSubseq(vector<int>& arr) {
        int n = arr.size();

        unordered_map<int,int> mp;
        for(int i=0;i<n;i++){
            mp[arr[i]] = i;
        }
        
        int longest_len=0;
        vector<vector<int>> table(n,vector<int>(n,2));

        for(int j=1;j<n;j++){
            for(int k=j+1;k<n;k++){
              int target = arr[k] - arr[j];
              if(mp.count(target) && mp[target]<j){
                int i = mp[target];
                table[j][k] = table[i][j] + 1;
              }
                longest_len = max(longest_len, table[j][k]);
            }
        }
        return (longest_len>=3) ? longest_len : 0;
    }
};
