class Solution {
public:
//Memoization
    int f(int i, int j,vector<vector<int>>& tr,vector<vector<int>>& dp ){
        int n = tr.size();
        if(i == n-1) return tr[i][j];
        if(dp[i][j]!=-1) return dp[i][j];
        int down = tr[i][j] + f(i+1,j,tr,dp);
        int dg = tr[i][j] + f(i+1,j+1,tr,dp);

        return dp[i][j] = min(down, dg);
    }
    int minimumTotal(vector<vector<int>>& triangle) {
        int n = triangle.size();
        vector<vector<int>> dp(n,vector<int>(n,-1));
        return f(0,0,triangle,dp);
    }
};

//Bottom Up Approach

class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        int n = triangle.size();
        vector<int> dp = triangle[n-1]; // Start from the last row
        
        for (int i = n-2; i >= 0; i--) { // Process from bottom to top
            for (int j = 0; j <= i; j++) {
                dp[j] = triangle[i][j] + min(dp[j], dp[j+1]); // Choose min path
            }
        }
        
        return dp[0]; // The top element contains the min path sum
    }
};
