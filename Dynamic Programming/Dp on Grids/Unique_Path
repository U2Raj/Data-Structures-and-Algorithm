class Solution {
    public:
        // Memoization
        //  int f(int i, int j, vector<vector<int>>& dp){
        //      if(i==0 && j==0) return 1;
        //      if(i<0 || j<0) return 0;
        //      if(dp[i][j]!=-1) return dp[i][j];
        //      int up = f(i-1,j,dp);
        //      int left = f(i,j-1,dp);
        //      return dp[i][j] = up+left;
        //  }
        // TC: O(n*m)
        // SC: O((m-1)+(n-1)) + O(n*m) --> Recursion call stack + dp array
        int uniquePaths(int m, int n) {
            vector<vector<int>> dp(m, vector<int>(n, -1));
            // return f(m-1,n-1,dp);
    
            // Tabulation
            dp[0][0] = 1;
            for (int i = 0; i < m; i++) {
                for (int j = 0; j < n; j++) {
                    if (i == 0 && j == 0)
                        continue;
                    else {
                        int up = (i > 0) ? dp[i - 1][j] : 0;
                        int left = (j > 0) ? dp[i][j - 1] : 0;
    
                        dp[i][j] = up + left;
                        ;
                    }
                }
            }
            return dp[m - 1][n - 1];
        }
    };
    TC:O(n*m)
    SC:O(n*m)