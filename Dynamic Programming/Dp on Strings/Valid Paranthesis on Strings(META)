class Solution {
public:
//Memoization
     int t[101][101];
    bool f(int open,int idx, string& s,int n){
        if(idx == n){
            return open==0;
        }
        if(t[open][idx]!=-1) return t[open][idx];
        bool isValid = false;
        if(s[idx]=='*'){
            isValid |= f(open+1,idx+1,s,n); // * -> open bracket '('
            isValid |= f(open,idx+1,s,n);   // * -> empty string
           if(open>0) isValid |= f(open-1,idx+1,s,n); // closed bracket ')'
        }else if(s[idx]=='('){
            isValid |= f(open+1,idx+1,s,n);
        }else if(open>0){
            isValid |= f(open-1,idx+1,s,n);
        }
        return t[open][idx] =  isValid;
    }
    bool checkValidString(string s) {
        //Memoization
        int open=0;
        int n = s.size();
        memset(t,-1,sizeof(t));
        return f(open,0,s,n);
    }
};

**********************************************************************************
// Using stack

class Solution {
    public:
        bool checkValidString(string s) {
            int n = s.size();
            int open=0;;
            int close=0;
    
            //Traversing from Left to Right
            for(int i=0;i<n;i++){
                if(s[i]=='(' || s[i]=='*'){
                    open++;
                }
                else if(s[i]==')'){
                    open--;
                }
                if(open<0) return false;
            }
    
           //Traversing from Right to Left 
            for(int i=n-1;i>=0;i--){
                if(s[i]==')' || s[i]=='*'){
                    close++;
                }
                else if(s[i]=='('){
                    close--;
                }
                if(close<0) return false;
            }
            return true;
        }
    };