class Solution {
public:
    //Memoization
    // int f(int idx, vector<int>& dp, vector<int>& nums){
    //     if(idx == 0) return nums[idx];
    //     if(idx<0) return 0;

    //     if(dp[idx]!=-1) return dp[idx];

    //     int pick = nums[idx] + f(idx-2,dp,nums);
    //     int not_pick = 0 + f(idx-1,dp,nums);

    //     return dp[idx] = max(pick, not_pick);
    // }

    //Tabulation
    // int f(int idx, vector<int>& dp, vector<int>& nums){
    //     int n = nums.size();
    //     dp[0] = nums[0];
 
    //     for(int i=1;i<n; i++){
    //         int pick = nums[i] ;
    //         if(i>1) pick+=dp[i-2];
    //         int not_pick = 0 + dp[i-1];

    //         dp[i] = max(pick,not_pick);
    //     }
    //     return dp[n-1];
    // }

    int rob(vector<int>& nums) {
        int n = nums.size();
        // vector<int> dp(n,-1);
        // return f(n-1,dp,nums); //Memoization
        // return f(0,dp,nums); //Tabulation
       
       //Space Optimisation
       
       int prev = nums[0];
       int prev2 = 0;

       for(int i=1;i<n;i++){
        int pick = nums[i];
        if(i>1) pick+= prev2;

        int not_pick = 0 + prev;

        int curri = max(pick, not_pick);

        prev2 = prev;
        prev=curri;
       }
    return prev;
    }
};
