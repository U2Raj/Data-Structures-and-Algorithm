class Solution{
public:
// Function to check if a node is a leaf node
bool isleaf(Node* root) {
    return (!(root->left) && !(root->right));
}

// Function to store the left boundary of the tree (excluding leaf nodes)
void leftBoundary(Node* root, vector<int>& ans) {
    Node* curr = root->left;  // Start from the left child of root
    while (curr) {
        if (!isleaf(curr)) ans.push_back(curr->data); // Add only non-leaf nodes
        if (curr->left) curr = curr->left;  // Prefer left child
        else curr = curr->right;            // If no left child, go right
    }
}

// Function to store the right boundary of the tree (excluding leaf nodes)
void rightBoundary(Node* root, vector<int>& ans) {
    Node* curr = root->right;  // Start from the right child of root
    vector<int> temp;  // Temporary vector to store nodes in reverse order
    
    while (curr) {
        if (!isleaf(curr)) temp.push_back(curr->data); // Add only non-leaf nodes
        if (curr->right) curr = curr->right;  // Prefer right child
        else curr = curr->left;               // If no right child, go left
    }
    
    // Add elements from temp in reverse order to maintain correct boundary order
    for (int i = temp.size() - 1; i >= 0; i--) {
        ans.push_back(temp[i]);
    }
}

// Function to store all the leaf nodes (from left to right)
void leaves(Node* root, vector<int>& ans) {
    if (!root) return;  // Base case: If root is null, return
    if (isleaf(root)) { // If the current node is a leaf, add it to the answer
        ans.push_back(root->data);
        return;
    }
    if (root->left) leaves(root->left, ans);  // Recur for left subtree
    if (root->right) leaves(root->right, ans); // Recur for right subtree
}

// Function to return the boundary traversal of a binary tree
vector<int> boundaryTraversal(Node* root) {
    vector<int> ans;  // Result vector to store boundary nodes
    if (root == nullptr) return ans;  // If tree is empty, return empty vector
    
    if (!isleaf(root)) ans.push_back(root->data); // Add root only if it's not a leaf
    
    leftBoundary(root, ans);  // Add left boundary
    leaves(root, ans);        // Add all leaf nodes
    rightBoundary(root, ans); // Add right boundary
    
    return ans;  // Return final boundary traversal list
}

};
