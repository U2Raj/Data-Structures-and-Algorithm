/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        //using BFS
        
        map<int, map<int,multiset<int>>> table;  // vertical , level, Nodes
        queue<pair<TreeNode*, pair<int,int>>> q;
        q.push({root,{0,0}});

        while(!q.empty()){
            auto p = q.front();
            q.pop();

            TreeNode* node = p.first;
            int x = p.second.first, y = p.second.second;
            table[x][y].insert(node->val);

            if(node->left) q.push({node->left , {x-1, y+1}});
            if(node->right) q.push({node->right, {x+1,y+1}});

        } 
         vector<vector<int>> ans;
         for(auto it1 : table){    // This is fetching the vertical
            vector<int> col;
            for(auto it2 : it1.second){    //In that particular vertical, we are fetching all the levels that is available
                col.insert(col.end(), it2.second.begin(),it2.second.end());   //In that level, we are inserting all nodes present at the end of col, as we are using "insert" here not push_back
            }                               
            ans.push_back(col);
         }
        return ans;
    }
};
