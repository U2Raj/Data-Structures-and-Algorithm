# üå≥ Maximum Path Sum in a Binary Tree  

## üß† Intuition  
Imagine you're **climbing a tree** üå≤, and at each branch, you decide:  
1. Should I go **left**? ‚¨ÖÔ∏è  
2. Should I go **right**? ‚û°Ô∏è  
3. Or should I take **both paths**? ü§î  

The goal is to find the **best possible path** that gives the **maximum sum of values** in the tree. üí∞‚ú®  

## üí° Approach  
1. **Use Recursion** üîÑ to calculate the best path sum at each node.  
2. **For every node**, decide:  
   - Take the **left path**? ‚úÖ  
   - Take the **right path**? ‚úÖ  
   - Take **both** and create a new path? üöÄ  
3. **Keep track of the maximum sum found** üèÜ.  

## ‚è≥ Complexity Analysis  
- **Time Complexity**: $$O(N)$$ (we visit every node once).  
- **Space Complexity**: $$O(H)$$ (where $$H$$ is the tree height due to recursion).  

## üíª Code  
```cpp
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int findMaxPath(TreeNode* node, int& maxSum) {
        if (node == nullptr) return 0; // No node, no sum! ‚õî

        // Explore left and right subtrees, ignoring negative sums (because negative paths reduce our max sum!)
        int leftPathSum = max(0, findMaxPath(node->left, maxSum));
        int rightPathSum = max(0, findMaxPath(node->right, maxSum));

        // Current node's best contribution (either take left, right, or both)
        maxSum = max(maxSum, leftPathSum + rightPathSum + node->val);

        // Return the max path that can be extended upwards üöÄ
        return node->val + max(leftPathSum, rightPathSum);
    }

    int maxPathSum(TreeNode* root) {
        int maxSum = INT_MIN; // Start with the smallest possible sum
        findMaxPath(root, maxSum); // Kick off recursion from root
        return maxSum; // Return the best sum found! üèÜ
    }
};
