class Solution {
public:
    bool canJump(vector<int>& nums) {
        int n = nums.size();
        int maxLeap = 0; // Tracks the farthest index that can be reached
        
        for(int i = 0; i < n; i++) {
            // If the current index is beyond the maximum reachable position, return false
            if(i > maxLeap) return false;
            
            // Update maxLeap to store the farthest position we can reach from index 'i'
            maxLeap = max(maxLeap, i + nums[i]);
        }
        
        // If we successfully traverse the loop without failing, reaching the end is possible
        return true;
    }
};

// This Greedy Algorithm ensures that if at any point i is greater than maxLeap, it's impossible to move forward, so the function returns false. Otherwise, it updates maxLeap and continues. ðŸš€